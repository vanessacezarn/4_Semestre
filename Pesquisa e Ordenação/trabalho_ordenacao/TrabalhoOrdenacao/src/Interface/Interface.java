/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interface;

import Arquivo.CarregarArquivo;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import trabalhoordenacao.Ordenacao;


/**
 * @author thiag
 */
public class Interface extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Interface.class.getName());

    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        lbl_ordenacao = new javax.swing.JLabel();
        btn_carregar = new javax.swing.JButton();
        lbl_totalNumeros = new javax.swing.JLabel();
        txt_quantidade = new javax.swing.JTextField();
        lbl_metodo = new javax.swing.JLabel();
        lbl_metSel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txa_metSelecionado = new javax.swing.JTextArea();
        btn_ordenar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_info = new javax.swing.JTable();
        chk_bolha = new javax.swing.JCheckBox();
        chk_selecao = new javax.swing.JCheckBox();
        chk_insercao = new javax.swing.JCheckBox();
        chk_agitacao = new javax.swing.JCheckBox();
        chk_pente = new javax.swing.JCheckBox();
        chk_shell = new javax.swing.JCheckBox();
        chk_quick = new javax.swing.JCheckBox();
        chk_heap = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbl_ordenacao.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbl_ordenacao.setText("ORDENAÇÃO");

        btn_carregar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btn_carregar.setText("carregar um arquivo .txt");
        btn_carregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_carregarActionPerformed(evt);
            }
        });

        lbl_totalNumeros.setText("Total de números carregados :");

        lbl_metodo.setText("Selecione método(s) :");

        lbl_metSel.setText("Métodos selecionados :");

        txa_metSelecionado.setColumns(20);
        txa_metSelecionado.setRows(5);
        jScrollPane1.setViewportView(txa_metSelecionado);

        btn_ordenar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_ordenar.setText("Ordenar");
        btn_ordenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ordenarActionPerformed(evt);
            }
        });

        tbl_info.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Qtd Trocas", "Qtd Comparações", "Tempo Ord (s)", "Método"
            }
        ));
        jScrollPane2.setViewportView(tbl_info);

        chk_bolha.setText("Bolha");

        chk_selecao.setText("Seleção");

        chk_insercao.setText("Inserção");

        chk_agitacao.setText("Agitação");

        chk_pente.setText("Pente");

        chk_shell.setText("Shell");

        chk_quick.setText("Quick");

        chk_heap.setText("Heap");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_totalNumeros)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_metodo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chk_bolha)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chk_selecao))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chk_pente)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chk_shell)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chk_quick)
                                        .addGap(18, 18, 18)
                                        .addComponent(chk_heap))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chk_insercao)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(chk_agitacao))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_metSel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_ordenar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(lbl_ordenacao))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(btn_carregar))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_ordenacao)
                .addGap(18, 18, 18)
                .addComponent(btn_carregar)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_totalNumeros)
                    .addComponent(txt_quantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_metodo)
                    .addComponent(chk_bolha)
                    .addComponent(chk_selecao)
                    .addComponent(chk_insercao)
                    .addComponent(chk_agitacao))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chk_pente)
                    .addComponent(chk_shell)
                    .addComponent(chk_quick)
                    .addComponent(chk_heap))
                .addGap(18, 18, 18)
                .addComponent(btn_ordenar)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(lbl_metSel)
                        .addGap(78, 78, 78)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    ArrayList<Integer> listaDoArquivo = new ArrayList<>();

    private void btn_carregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_carregarActionPerformed
        limpar();
        int arquivo = jFileChooser1.showOpenDialog(this);
        //ArrayList<Integer> listaDoArquivo = new ArrayList<>();
        
        if (arquivo == JFileChooser.APPROVE_OPTION) {
            java.io.File arquivoSelecionado = jFileChooser1.getSelectedFile();
            CarregarArquivo.popularArqNumeros(listaDoArquivo, arquivoSelecionado);
            JOptionPane.showMessageDialog(this, "Arquivo carregado com sucesso");

        txt_quantidade.setText(String.valueOf(listaDoArquivo.size()));
        }
    }//GEN-LAST:event_btn_carregarActionPerformed

    private void btn_ordenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ordenarActionPerformed
        txa_metSelecionado.setText("");

        DefaultTableModel tabela = (DefaultTableModel) tbl_info.getModel();
        tabela.setRowCount(0);
        if (chk_bolha.isSelected()){
            txa_metSelecionado.append("Bolha\n");
            List<Integer>listaBolha = new ArrayList<>();
            listaBolha.addAll(listaDoArquivo);//copia da lista do arquivo
            long tempoInicio = System.nanoTime();
            int[] resultado = Ordenacao.bolha(listaBolha);
            int comparacoes = resultado[0];
            int trocas = resultado[1];
            long tempoFim = System.nanoTime();
            double tempo = (tempoFim - tempoInicio)/1000000000.0;
            String tempoFormatado = String.format("%.4f", tempo); 
            tabela.addRow(new Object[]{trocas,comparacoes,tempoFormatado,"Bolha"});
        }
        if (chk_selecao.isSelected()){
            txa_metSelecionado.append("Seleção\n");
            List<Integer>listaSelecao = new ArrayList<>();
            listaSelecao.addAll(listaDoArquivo);
            long tempoInicio = System.nanoTime();
            int[] resultado = Ordenacao.selecao(listaSelecao);
            int comparacoes = resultado[0];
            int trocas = resultado[1];
            long tempoFim = System.nanoTime();
            double tempo = (tempoFim - tempoInicio)/1000000000.0;
            String tempoFormatado = String.format("%.4f", tempo);
            tabela.addRow(new Object[]{trocas,comparacoes,tempoFormatado,"Seleção"});
        }
        if (chk_insercao.isSelected()){
            txa_metSelecionado.append("Inserção\n");
            List<Integer>listaInsercao = new ArrayList<>();                       
            listaInsercao.addAll(listaDoArquivo);
            long tempoInicio = System.nanoTime(); 
            int[] resultado = Ordenacao.insercao(listaInsercao);
            int comparacoes = resultado[0];
            int trocas = resultado[1];
            long tempoFim = System.nanoTime();
            double tempo = (tempoFim - tempoInicio)/1000000000.0;
            String tempoFormatado = String.format("%.4f", tempo);
            tabela.addRow(new Object[]{trocas,comparacoes,tempoFormatado,"Inserção"});
        }
        if (chk_agitacao.isSelected()){
            txa_metSelecionado.append("Agitação\n");
            List<Integer>listaAgitacao = new ArrayList<>();
            listaAgitacao.addAll(listaDoArquivo);
            long tempoInicio = System.nanoTime();                        
            int[] resultado = Ordenacao.agitacao(listaAgitacao);
            int comparacoes = resultado[0];
            int trocas = resultado[1];
            long tempoFim = System.nanoTime();
            double tempo = (tempoFim - tempoInicio)/1000000000.0;
            String tempoFormatado = String.format("%.4f", tempo);            
            tabela.addRow(new Object[]{trocas,comparacoes,tempoFormatado,"Agitação"});
        }
        if (chk_pente.isSelected()){
            txa_metSelecionado.append("Pente\n");
            List<Integer>listaPente = new ArrayList<>();
            listaPente.addAll(listaDoArquivo);
            long tempoInicio = System.nanoTime();
            int[] resultado = Ordenacao.pente(listaPente);
            int comparacoes = resultado[0];
            int trocas = resultado[1];
            long tempoFim = System.nanoTime();
            double tempo = (tempoFim - tempoInicio)/1000000000.0;
            String tempoFormatado = String.format("%.4f", tempo);
            tabela.addRow(new Object[]{trocas,comparacoes,tempoFormatado,"Pente"});
        }
        if (chk_shell.isSelected()){
            txa_metSelecionado.append("Shell\n");
            List<Integer>listaShell = new ArrayList<>();
            listaShell.addAll(listaDoArquivo);
            long tempoInicio = System.nanoTime();
            int[] resultado = Ordenacao.shell(listaShell);
            int comparacoes = resultado[0];
            int trocas = resultado[1];
            long tempoFim = System.nanoTime();
            double tempo = (tempoFim - tempoInicio)/1000000000.0;
            String tempoFormatado = String.format("%.4f", tempo);
            tabela.addRow(new Object[]{trocas,comparacoes,tempoFormatado,"Shell"});
        }
        if (chk_quick.isSelected()){
            txa_metSelecionado.append("Quick\n");
            List<Integer>listaQuick = new ArrayList<>();
            listaQuick.addAll(listaDoArquivo);
            long tempoInicio = System.nanoTime();
            int[] resultado = Ordenacao.quick(listaQuick, 0, listaQuick.size() - 1);
            int comparacoes = resultado[0];
            int trocas = resultado[1];
            long tempoFim = System.nanoTime();
            double tempo = (tempoFim - tempoInicio)/1000000000.0;
            String tempoFormatado = String.format("%.4f", tempo);
            tabela.addRow(new Object[]{trocas,comparacoes,tempoFormatado,"Quick"});
        }
        if (chk_heap.isSelected()){
            txa_metSelecionado.append("Heap\n");
            List<Integer>listaHeap = new ArrayList<>();
            long tempoInicio = System.nanoTime();                                    
            listaHeap.addAll(listaDoArquivo);
            int[] resultado = Ordenacao.heapSort(listaHeap);
            int comparacoes = resultado[0];
            int trocas = resultado[1];
            long tempoFim = System.nanoTime();
            double tempo = (tempoFim - tempoInicio)/1000000000.0;
            String tempoFormatado = String.format("%.4f", tempo); 
            tabela.addRow(new Object[]{trocas,comparacoes,tempoFormatado,"Heap"});
        }
        
        
    }//GEN-LAST:event_btn_ordenarActionPerformed

 
    public void limpar(){
        listaDoArquivo.clear();
        DefaultTableModel tabela = (DefaultTableModel) tbl_info.getModel();
        tabela.setRowCount(0); // limpa a tabela
        chk_bolha.setSelected(false);
        chk_heap.setSelected(false);
        chk_selecao.setSelected(false);
        chk_insercao.setSelected(false);
        chk_agitacao.setSelected(false);
        chk_pente.setSelected(false);
        chk_shell.setSelected(false);
        chk_quick.setSelected(false);
        chk_heap.setSelected(false);
        txt_quantidade.setText("");
        txa_metSelecionado.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Interface().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_carregar;
    private javax.swing.JButton btn_ordenar;
    private javax.swing.JCheckBox chk_agitacao;
    private javax.swing.JCheckBox chk_bolha;
    private javax.swing.JCheckBox chk_heap;
    private javax.swing.JCheckBox chk_insercao;
    private javax.swing.JCheckBox chk_pente;
    private javax.swing.JCheckBox chk_quick;
    private javax.swing.JCheckBox chk_selecao;
    private javax.swing.JCheckBox chk_shell;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_metSel;
    private javax.swing.JLabel lbl_metodo;
    private javax.swing.JLabel lbl_ordenacao;
    private javax.swing.JLabel lbl_totalNumeros;
    private javax.swing.JTable tbl_info;
    private javax.swing.JTextArea txa_metSelecionado;
    private javax.swing.JTextField txt_quantidade;
    // End of variables declaration//GEN-END:variables
}
